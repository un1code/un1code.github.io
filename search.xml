<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[js中的this指针]]></title>
    <url>%2F2019%2F04%2F15%2Fjs%E4%B8%AD%E7%9A%84this%E6%8C%87%E9%92%88%2F</url>
    <content type="text"><![CDATA[this指针是什么&emsp;&emsp;this指针是作为一个隐藏的参数存在于函数中的。我们首先需要明确，它是一个参数，也是一个指针。解析器在每次调用函数的时候（注意：是每次调用）都会给函数中传一个隐藏的参数，这就是this。1234function f1()&#123; console.log(this); &#125;f1(); 以上代码是一个简单的函数。我们在调用时，可以看成这样：1f1(this); 同时我们在函数体中写下了在控制台打印this的语句。执行这段代码，在控制台中，我们可以看到打印出了一个叫做Window的对象。我们都知道Window对象是浏览器创建的用来包含所有全局变量及方法的一个对象。我们的f1写在全局里，自然是Window的方法。即就是this指向了这个方法的来源(Window)。 再看以下代码：12345678910111213var name="全局name";var obj = &#123; name:"tom", age:99, sayName:getName&#125;function getName()&#123; console.log(this.name);&#125;//getName();//obj.sayName(); 我们看最后两行。如果去掉getName的注释，那么控制台就输出：全局name。如果去掉obj.sayName()的注释，控制台就输出：tom。首先第一种调用方法我们知道它的this指向的是Window，所以取的是Window里的全局变量name。然而第二种调用方法中，我们是将函数作为对象的属性写了进去，然后通过对象obj来调用这个函数。那么这时，由于是obj调用的该函数，this指向的就是obj，取的name当然也是函数内作用域的name。简而言之一句话，谁调用的函数，this指针就指向谁。全局调用指向Window，对象调用指向对象，使用new将函数作为构造函数调用就指向新创建的对象。就是这么简单。 this指针有什么用？类似于上面的例子：123456789101112131415161718192021var name="全局name";var obj1 = &#123; name:"tom", age:99, sayName:getName&#125;var obj2 = &#123; name:"jerry", age:99, sayName:getName&#125;function getName()&#123; console.log(this.name);&#125;//getName();//obj1.sayName();//obj2.sayName(); 这就是一个实际应用的例子。全局变量、不同的函数作用域内都有一个同名变量。我们在编写获取该变量的函数时，只需要使用this指针就能轻松获取自己想要的作用域下的那个属性值。另外，this的指向是可以我们来手动改变的。只需要调用函数的call()或者apply()方法。比如上面的代码，我在obj1.sayName()处稍作修改：obj1.sayName.call(obj2);这样的话原指向obj1的this就被指向obj2了。]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS应用:实现移动动画效果-1]]></title>
    <url>%2F2019%2F03%2F18%2F%E5%BA%94%E7%94%A8-%E5%AE%9E%E7%8E%B0%E7%A7%BB%E5%8A%A8%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C-1%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;将一个元素营造出“正在运动”的效果，实际上原理就是改变它的坐标值——这就是移动动画最核心的思想。 最基础的移动&emsp;&emsp;首先来看一个最基础的移动。我们目前有这样一个结构：1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;style type="text/css"&gt; *&#123; padding: 0; margin: 0; &#125; #box1&#123; height: 100px; width: 100px; background-color: #bfc; position: absolute; &#125; #line&#123; height: 500px; border-left: 1px solid red; position: absolute; left: 300px; &#125; &lt;/style&gt; &lt;body&gt; &lt;div id="box1"&gt;&lt;/div&gt; &lt;div id="line"&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 效果图如下：我们从代码和效果图可以看出，右侧的类似终点线一般的东西是一个只有1px左边距的div，偏移为300px；同时有一个没有任何偏移的div#box1.我们加入一些js代码，让box1产生位移：1234567891011&lt;script type="text/javascript"&gt; function MoveDiv ()&#123; if(!document.getElementById) return false; if(!document.getElementById("box1")) return false; var box = document.getElementById("box1"); box.style.left = "200px"; &#125; window.onload = function()&#123; MoveDiv(); &#125; &lt;/script&gt; 在页面加载完成后，将直接运行MoveDiv函数，这时候我们可以看到box1已经抵达了“终点”。我们通过js来操作box1的样式，从而实现了一个位移的效果。但是这远远不能称为动画，我们知道动画是要有一个循序渐进的过程的，那我们想一下如果可以有一个定时器，将定时器间隔设置为很短的时间，同时在一个间隔内调用一次移动函数(并且将移动的幅度大幅减小，例如1px)，是不是就可以体现出一个动态的移动效果了呢？ 加入延时调用的移动&nbsp;&nbsp;所谓延时调用，顾名思义，延时调用是指一段函数不会立即执行，而是在指定时间后执行且只执行一次。函数体及参数如下：setTimeOut(“fun”,interval); fun:调用的函数 interval:调用间隔，单位是ms它还有一个对应函数clearTimeOut可以取消这个延时调用的执行——前提是，你使用了一个变量来保存了setTimeOut的返回值，并将它作为取消延时调用的参数。我们在了解这些之后，就可以着手来写一个真正可以成为动画效果的移动函数了。首先明确我们的函数逻辑： 1.获得元素的当前位置 2.如果元素已经到达目的地，则退出函数。 3.如果元素没有到达目的地，则把它向目的地移动一点。 4.经过一段时间间隔后，重复上述步骤。明确之后，我们就可以编写出如下函数：1234567891011121314151617181920212223&lt;script type="text/javascript"&gt; function MoveDiv ()&#123; if(!document.getElementById) return false; if(!document.getElementById("box1")) return false; var box = document.getElementById("box1"); var xpos = parseInt(box.offsetLeft); console.log(xpos); var ypos = parseInt(box.offsetTop); console.log(ypos); if(xpos == 200 &amp;&amp; ypos == 100) return true; if(xpos &lt; 200) xpos++; if(xpos &gt; 200) xpos--; if(ypos &lt; 100) ypos++; if(ypos &gt; 100) ypos--; box.style.left = xpos+"px"; box.style.top = ypos + "px"; movement = setTimeout("MoveDiv()",10); &#125; window.onload = function()&#123; MoveDiv(); &#125; &lt;/script&gt; 我们就可以看到div会缓缓的向右下移动，当top达到100后停止向下移动转为向右平移，到“终点”处结束移动。 至此移动的第一部分结束。我们虽然成功实现了基本的动画效果，但是仍有很大的进步空间。对代码的优化，以及对MoveDiv函数的更多扩展，请详见下一篇文章。]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ClearFix的最终形态:同时解决高度塌陷和垂直外边距重叠]]></title>
    <url>%2F2019%2F03%2F13%2F19-3-13%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;在上一篇文章：高度塌陷问题的解决方法中，我们经过一番探索最终找到了一个可以将表现和结构分开的完美的解决方法：定义clearfix类，结合伪类选择器和clear属性达成效果。同时在文章中讲到BFC的时候，我们说到虽然开启BFC是最简单的方法，且其中设置overflow为hidden是副作用最小的方法，但是在某些情况下仍然会有副作用。我们在这篇文章中就详细解释一下。 BFC的副作用&emsp;&emsp;首先我们先讲高度塌陷问题中使用BFC会有什么副作用。首先我们按照上篇文章的代码设置好父子元素。此时我已经将子元素的float开启，并将父元素的overflow设置为hidden，BFC也已经开启，可以看到高度没有塌陷。此时我给子元素设置一个正值的margin-top为20px和正值的margin-bottom为20px,我们可以看到正常的生效了。如果设置为负值会怎么样呢？我们将上下的margin改为-20px试试：出现了很明显的问题。内容显示不全。设置为正值还好说，设置为负值子元素的内容都无法完整显示，明显是不应该发生的。 同样的操作，我们在使用了clear和after结合的clearfix方法中试试看。将margin-top分别设置为50px和-50px，观察效果：无论怎样，都会完整的显示子元素的内容。 出现问题的原因是：开启BFC后，父元素变得可以包含浮动的子元素了，并且开启BFC的元素不会被浮动元素覆盖。理论上来讲我们可以当它们已经处在同一层级了，子元素的显示范围自然而然受到父元素大小的制约。而且设置margin的话并不算子元素自己的height，就算使用了overflow:auto也不会出现滚动条来浏览剩余部分的子元素（暂且不谈有滚动条是否美观。） 然而使用clearfix的话并没有改变父元素的层级，子元素在变为浮动后层级是高于父元素的，所以就算超出了范围我们还是可以看到子元素的全部内容。同时，clear属性的内涵是：让一个元素处于不受浮动元素影响的状态，其实就是这个浮动元素如果不是浮动元素的话，受影响的元素本该在哪儿？使用clear属性就可以将目标元素设置到这个受影响前的位置。所以边框的位置会改变。 通过上面的演示我们明确了使用BFC时，会出现的副作用。接下来我们来探讨一个比较常见的问题：垂直外边距重叠问题。 垂直外边距重叠问题&emsp;&emsp;我们先来看一段代码。123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type="text/css"&gt; .box1&#123; width: 200px; height: 200px; background-color: red; &#125; .box2&#123; width: 100px; height: 100px; background-color: #FFFF00; margin-top: 50px; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class="box1"&gt; &lt;div class="box2"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 在这份代码中，我给子元素设置了一个margin-top。按理说它会相对于父元素移动，而父元素不动。但是页面表现如下。我们看到父元素和子元素同时向下移动了50px，父子元素之间的相对位置并没有改变。造成这种现象的主要原因是：在网页中垂直方向的相邻外边距会发生重叠，兄弟元素之间的垂直相邻外边距会取最大值而不是求和（垂直方向指top/bottom）。如果发生垂直相邻外边距的重叠是父子元素之间的，子元素的外边距会设置给父元素。在本例中，子元素的外边距被设置给了父元素，所以没有达到我们预期的效果。解决重叠也很简单，只需要破坏产生重叠的条件之一就可以了。 垂直外边距重叠的解决方法&emsp;&emsp;产生重叠的因素有两个：1.垂直 2.相邻 我们只需破坏其中一个就可以解决。一般来说我们都是通过破坏相邻来解决的。 1.给父元素设置padding-top&emsp;&emsp;不用说，是一个很蠢的方法，不过还是能达到效果。给父元素设置padding-top使得父子元素之间的相邻关系被破坏了，但是我们后来还需要在父元素的高度里把这个padding-top减去才可以还原原来的高度。非常不方便。 2.设置div&emsp;&emsp;思路是采用解决高度塌陷问题的时候，我们使用一个空的div进行占位，起到分隔的效果。很可惜，空的div并不能起作用。 3.设置table&emsp;&emsp;我们使用一个空的table来作分割作用，成功阻止了外边距的重叠。但是此时我们是增加了不必要的标签，老样子，我们将结构和表现分离，把这个table写到css里面去。我们只需要在父元素的最前面部分设置这个table，那就要使用before伪类。1234.box1:before&#123; content: ""; display: table; &#125; 设置一个空的内容，并将display设置为table使得该元素(指伪类中的元素)以table显示。 ClearFix的最终形态&emsp;&emsp;我们说到这里，发现这个解决垂直外边距重叠的方法和解决高度塌陷问题的方法十分类似，原理类似写法类似。那么我们就可以将两种方法整合到一起，封装成一个类叫做clearfix，包治百病。我们来看看解决高度塌陷问题的代码：12345678.clearfix:after&#123; content: ""; clear: both; display: block; /*将行内元素转化为块元素*/ &#125; .clearfix&#123; zoom: 1; &#125; 我们知道table也是块元素，那么我们完全可以将block替换为table。同时clear:both这个属性在解决外边距重叠中也没有影响，那么我们直接合二为一：12345678.clearfix:after,.clearfix:before&#123; content: ""; clear: both; display: table; /*将行内元素转化为块元素*/ &#125; .clearfix&#123; zoom: 1; &#125; 这样它就可以同时解决2个问题，也包含了IE的兼容。这就是clearfix的终极形态，哪里有问题就给哪里的class里加上clearfix即可解决。]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高度塌陷问题的解决方法]]></title>
    <url>%2F2019%2F03%2F07%2F19-3-7%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;相信在编写html的时候，大家总会遇到各种莫名奇妙的错误。自己写的结构，自己写的样式，表现出来的却和预想之中完全不同。今天我就来讲讲一个比较常见的问题——高度塌陷问题。 1.问题背景和描述&emsp;&emsp;先看这段代码。1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type="text/css"&gt; .box1&#123; border: 1px red solid; &#125; .box2&#123; width: 100px; height: 100px; background-color: blue; &#125; .box3&#123; width: 100%; height: 100px; background-color:orange; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class="box1"&gt; &lt;div class="box2"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="box3"&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; &emsp;&emsp;很明显，这段代码描述了一个class为box1的div作为父元素包裹了一个class为box2的div。它们两个作为div都是块元素。显示的效果如下。从样式中我们可以看到，我们并没有给box1设置高度，也就是说box1的高度完全是由子元素box2的高度来支撑的。现在，我们将box2设置为浮动，看看会发生什么效果。我们看到，不但边框“塌”了，而且底下的box3也向上浮动，打乱了原来的排版。这是因为box2设置为浮动之后脱离了文档流，box1失去了支撑的子元素所以高度塌陷。 2.解决方案1.给父元素的高度写死&emsp;&emsp;这是最蠢的办法。缺点显而易见，如果子元素的大小进行了改变那么父元素也要跟着调整，十分麻烦。开发中绝对不能使用这种方法。 2.开启BFC/HasLayoutBFC是什么？根据W3C标准，在页面中的元素都有一个隐藏的属性：Block Formatting Context（BFC）块级格式化环境该属性可以设置打开或者关闭。默认是关闭的。开启之后,元素将具有以下特性： 1.父元素的垂直外边距不会和子元素重叠。（可以解决margin重叠问题） 2.开启BFC的元素不会被浮动元素覆盖。 3.开启BFC的元素可以包含浮动的子元素。高度塌陷的根本原因就是父元素无法包含浮动的子元素。所以只需设置这个就可以解决。 如何开启BFC？因为是隐藏属性所以无法直接开启，只能间接开启。方法有很多。 1.设置元素浮动(脱离文档流) 2.设置元素绝对定位(脱离文档流) 3.设置元素display为inline-block。 4.将元素的overflow设置为一个非visible值。 1.使用浮动虽然可以表面解决高度塌陷，使得父元素被撑开。但是会导致父元素的宽度丢失而且会导致下边的元素上移，排版打乱。不推荐2.也不推荐3.可以解决问题，排版不会乱。但是还会导致宽度丢失。4.副作用最小。解决塌陷问题而且宽度不会丢失。一般设置auto或者hidden。 BFC的IE6兼容：另一个隐藏属性HasLayout我们在业界毒瘤IE6中，BFC是没法起作用的。但是还好IE6中也有一个隐藏属性:HasLayout。该属性的作用和BFC类似。HasLayout的开启方法也很多（指定宽度就是其中之一）。副作用最小的方法将元素的zoom设置为1即可。zoom表示放大，写几就是放大几倍。放大1倍其实就是没放大，副作用最小。该方法只支持IE且IE7及以下可以使用。开发时，我们需要两个都写上(zoom,overflow)保证兼容性。在本例中，我们将box1的样式中设置overflow:hidden，就可以解决问题。 这个方法是最简单的处理方式而且一般不会出现错误。看起来开启BFC/HasLayout就足以解决这个问题了。其实不然，所谓副作用最小的意思是：在某种情况下还是会产生副作用。例如：在使用BFC时，如果在父元素中有相对定位的元素，overflow设置为hidden，那么相对定位的元素移动到父元素以外的时候，就会看不到。除了这种情况其他情况没有问题。 3.使用clear&emsp;&emsp;这时候轮到一个强力的样式出场了:clear。clear顾名思义，是清除掉浮动元素对指定元素的影响。可选值有left,right,both。其中both的意思是清除左右浮动中影响最大的那个，而不是两边都清除，需要注意。使用clear来解决本问题的思路是：在box1的最后面加上一个子元素div叫做clear，让它达成一个占位的效果：1234567&lt;body&gt; &lt;div class="box1"&gt; &lt;div class="box2"&gt;&lt;/div&gt; &lt;div class="clear"&gt;abc&lt;/div&gt; &lt;/div&gt; &lt;div class="box3"&gt;&lt;/div&gt;&lt;/body&gt; 我们知道clear的所谓“清除浮动元素的影响”的意思就是，如果对我造成了影响的浮动元素它不是浮动元素的话我所处的位置在哪，清除浮动影响后我就还在哪。那么在本例中，假设box2不是浮动元素(也就是最初的情况)那么这时的效果图应该如下。其中abc这一行，就是我们新加的div.clear。 我们如果对.clear进行设置clear样式，那么就会保证在box2变成浮动元素后，abc所在的位置不会受到box2浮动的影响而上浮，还是停留在原地。也就是说，设置clear样式后，页面的表现效果和上面的效果图将不变。现在我们理解了abc这行”占位”所起到的作用——保持原有位置不变，撑起box1的高度，让它不会塌陷。现在要做的，就是将abc删掉，它只是一个让占位这个概念看起来更直观的工具。删除abc以后，高度塌陷问题将解决。 4.最终方案&emsp;&emsp;其实第三种方案不能说是完美方案，因为高度塌陷问题说到底是样式问题，是表现的问题。我们用结构去解决一个表现的问题，添加了多余的无用标签，无疑是一种负担。我们在设计时一定要将结构和表现分开，所以我们尝试只使用css来解决这个问题。原理还是使用clear。但是我们这次不添加新标签。我们当时添加新标签时是在box1的最末尾处添加的。同时这个标签也没有内容，只是设置了clear样式。那么我们就可以给box1再添加一个类叫做clearfix12345&lt;body&gt; &lt;div class="box1 clearfix"&gt; &lt;div class="box2"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 对clearfix使用after伪类选择器来选中最末尾处。12345678.clearfix:after&#123; content: ""; clear: both; display: block; /*将行内元素转化为块元素*/ &#125; .clearfix&#123; zoom: 1; &#125; 这才堪称是最完美的解决方法。由于IE6不支持after伪类我们还是要使用HasLayout解决，所以最后记得写上zoom:1;。]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux编译时报错:undefined reference to memcpy@GLIBC_2.14]]></title>
    <url>%2F2019%2F03%2F01%2F19-3-1%2F</url>
    <content type="text"><![CDATA[对已经写好的模块进行make，结果出现了以下错误：1234/usr/local/glibc-2.14/lib/libnsl.so.1:undefined reference to 'memcpy@GLIBC_2.14'/usr/local/glibc-2.14/lib/libnsl.so.1:undefined reference to '__lib_rpc_getport@GLIBC_PRIVATE'collect2: ld returned 1 exit statusmake: *** [../../../product/release/m_echo] Error 1 初步判断是缺少对应的库，使用string命令查看现有系统的glibc版本，发现并不存在该版本（2.14）的GLIBC，应该是libnsl.so所需的编译环境比当前系统版本要高，但也不确定。 先查看环境变量:echo $LD_LIBRARY_PATH,显示为/usr/local/glibc-2.14/lib: 但是我们目前并没有这个版本，它glibc的默认环境变量是一个并不存在的目录，找不到库编译当然会报错。 直接进行安装即可解决。 我是通过export命令将环境变量置空，再进行编译也能成功。如果你安装后也没有解决，或者安装不成功，又或者网络原因无法安装也可以尝试我的这个办法export LD_LIBRARY_PATH=&quot;&quot; 当然，通过export命令设置的环境变量每次重启shell终端时就会重置，每次都要重新设置。我们可以通过修改文件每次开机时自动进行export。 可以修改/etc/profile文件，在最底下加入我们的环境变量。但是最好不要这么做，因为该文件会影响这个系统上所有的用户。我们只需要让自己的用户生效就可以了。 所以我们需要修改的路径为 /home/xxx(xxx为你的用户名)/.bash_profile,在最底下加入export LD_LIBRARY_PATH=””即可。]]></content>
      <categories>
        <category>Linux相关</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lua中的泛型for循环中的一个小问题]]></title>
    <url>%2F2019%2F02%2F22%2F19-2-22%2F</url>
    <content type="text"><![CDATA[之前公司需要编写一个lua脚本进行相关的功能测试，于是之前没用过这个语言的我开始了对它的学习。其中泛型for循环的写法如下： 1234a = &#123;"one","two","three"&#125;for i,v in ipairs(a) do print(i,v)end 这里是直接使用ipairs迭代器函数对a这个table进行了遍历，从而打印出a这个表的全部字段。看到这里，我想到了除了加上ipairs或者pairs，还会不会有其他的遍历方法，比如我直接加上表名： 12for i,v in a do... 这样是否也可以达到遍历的效果？首先在网上进行查询，发现有人问了这个问题，并且在提问中非常肯定的说这个写法没有任何问题（他给出的例子是一个游戏脚本），并且询问其中的原理。然而我自己试了下这种用法，并不能通过语法检查。 继续进行搜索，在各种文章博客网站中见到的泛型for后面加的全都是ipairs或者pairs，并且将这两者的区别讲了一遍又一遍。但是我始终没有找到哪篇讲in的后面能不能加其他东西的文章，除了看到这么一个例子： 123456789101112function square(iteratorMaxCount,currentNumber) if currentNumber&lt;iteratorMaxCount then currentNumber = currentNumber+1 return currentNumber, currentNumber*currentNumber endend for i,n in square,3,0 --实现了1-3每个数字的平方遍历。do print(i,n)end 算是一种不同的用法吧。 还是直接看官方文档最省事，打开Lua manual，定位到For Statement中的generic for loop处。有如下说明:The generic for statement works over functions, called iterators. On each iteration, the iterator function is called to produce a new value, stopping when this new value is nil. The generic for loop has the following syntax: 12stat ::= for namelist in explist do block endnamelist ::= Name &#123;',' Name&#125; Note the following: explist is evaluated only once. Its results are an iterator function, a state, and an initial value for the first iterator variable. f, s, and var are invisible variables. The names are here for explanatory purposes only. You can use break to exit a for loop. The loop variables var_i are local to the loop; you cannot use their values after the for ends. If you need these values, then assign them to other variables before breaking or exiting the loop. 大意：泛型for语句中in后面跟的是叫做迭代器的东西(比如那个函数，比如ipairs)。每一次迭代函数都会产生一个新值，直到这个值为nil为止。 具体注意事项：迭代器返回3个值，分别是这个迭代器函数，一个状态常量，一个控制变量（对应for i,v中的i和v这两个变量。）迭代器只会初始化一次，即使后面有循环也不会多次初始化。 可以使用break退出循环，并且其中的i,v是局部变量，for结束后值不会保留。如果需要这个值需要自己在里面接收。 至此已经完全清楚了：泛型for循环后加的必须是一个返回三个参数的迭代器（迭代器函数+状态常量+控制变量），其他的写法均为错误。ipairs和pairs都会返回这三个参数，而我上面列举的那个遍历数字并输出其平方的例子中是直接显式传入3个参数的。]]></content>
      <categories>
        <category>脚本语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jenkins的定时构建中的‘H']]></title>
    <url>%2F2019%2F02%2F17%2F19-2-17%2F</url>
    <content type="text"><![CDATA[前一阵在jenkins新建了一个项目，配置到定时构建这里的时候因为自己是第一次用，所以一边在网上查它的语法，一边在看官方给的注解。看了一会以后感觉可以写出达到自己预期的构建时间了，不过还有一个问题就是这个H到底是个什么东西？在网上查的时候好像也没有看见对它的解释。 先来看一下这个由5部分构成的定时构建参数吧。这五部分分别代表： minute hour day month dayofweekminute:从0-59的整数hour:从0-23的整数day:从1-31的整数。当然需要符合当月的最大日期month:从1-12的整数dayofweek:从0-7的整数，代表一周之内的第几天。0或7代表周日。 然后，*的意思代表“所有”。这时候我心想要的效果是每天的早上6点和晚上20点进行一次自动构建，所以我填写的参数是：* 6,20 * * *这时候底下弹出一个黄色感叹号。大概意思是告诉我不推荐这种写法，推测我是想在6，20点中的某一分钟开始进行构建，建议我改成H 6,20 * * *。这时候我才发现我写的意思是每分钟都执行构建！于是更改了以后，底下的提示信息输出了下一次构建的时间，是当日的晚上8点15分(这时候是下午。)再仔细看了看英文注解，这个H的意思说白了就是一个随机值，但这个随机值并不是通过什么随机函数或种子产生的，它是根据你的项目名生成的，即每个项目都会有不同的随机构建时间。 最后再说一点别的写法：*/5表示每5(分钟/小时/日…)整数间的-表示整数列，如1-4表示1，2，3，4指定数值用逗号分隔，比如我上面的6，20。]]></content>
      <categories>
        <category>构建相关</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新的开始]]></title>
    <url>%2F2019%2F02%2F16%2FNewBegins%2F</url>
    <content type="text"><![CDATA[过去 至于离开CSDN的原因不用多说，满屏幕的广告，每逢搞什么活动（比如一个月以前CSDN什么大赛还是什么来着？）这时候页面上一定有个超大超晃眼的弹出型广告，没错只要你鼠标不小心划到这个小广告图标就瞬间蹦出来超大的一个广告，以至于那一阵我看别人博客的时候不但要注意让自己的注意力不被左边的百度推广广告吸引，一边还要小心自己的鼠标不要划到广告窗。。。 另一个问题就是抄袭严重，以及烂尾、不明所以的文章也很多。每次查一个问题，蹦出来一万个不同人的csdn博客里面内容都是一模一样的。甚至还有前面洋洋洒洒写了一堆，最后写了一句 经过以上方法尝试，问题均没有解决。 看到这，我只能说自己都被气笑了。 现在查问题看技术文章，我都上segmentfault、简书了。stackoverflow比较慢，自己英文水平又不怎么样，所以去得少。相比csdn，思否确确实实像一个专心做技术的网站。在一个际遇看到大佬说的一句话，作为一个程序猿没有一个只属于自己的博客是悲哀的。于是说干就干，在这里我可以想写什么写什么，也不用看满屏恶心人的广告。使用了流行的hexo+github方法，又经过了购买域名的几天实名认证，自己的博客算是露头了。 现在 今天又花了一天时间，将评论，收藏，主题配置什么的都搞定了，剩下的就只剩把我在csdn上写的那些文章搬运过来了。目前还在苦恼中，好像没有什么好用的批量迁移工具。实在不行就自己一篇篇搬吧，就当作是复习了(强行安慰自己)。但是在这之前，要先写一篇纪念开张的博客，也就是这篇文章的由来。 未来 我自己想在这个博客上记的东西当然不止技术方面的，可能有杂谈，也可能有自己一时兴起练的画作。当然，一个博客最重要的东西就是它的内容，我自己当然也会写自己觉得有意义的东西，也算是对自己负责。希望接下来的日子里我都能做到一步一脚印。 在这里写博客用到markdown，以前直接用编辑器的日子说再见了，目前还有点不太习惯，还在努力学习语法中。多写写就会了]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
</search>
